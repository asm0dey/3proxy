---
# This is an example playbook to execute goss tests.
# Tests need distributed to the appropriate ansible host/groups
# prior to execution by `goss validate`.

- name: Verify
  hosts: all
  become: true
  vars:
    goss_version: v0.3.2
    goss_arch: amd64
    goss_dst: /usr/local/bin/goss
    goss_url: "http://github.com/aelsabbahy/goss/releases/download/{{ goss_version }}/goss-linux-{{ goss_arch }}"
    goss_test_directory: /tmp
    goss_format: documentation
  tasks:
    - name: Check if goss is downloaded
      command: "which {{ goss_dst }}"
      register: goss_exists
      check_mode: false
      changed_when: false  # Never report as changed
      ignore_errors: true

    - name: Download and install Goss
      command: "wget {{ goss_url }} -O {{ goss_dst }}"
      register: download_goss
      until: download_goss is succeeded
      retries: 3
      when: goss_exists.rc != 0

    - name: Chmod
      file:
        path: "{{ goss_dst }}"
        state: file
        mode: 0755

    - name: Copy Goss tests to remote
      copy:
        src: "{{ item }}"
        dest: "{{ goss_test_directory }}/{{ item | basename }}"
      with_fileglob:
        - "{{ lookup('env', 'MOLECULE_VERIFIER_TEST_DIRECTORY') }}/test_*.yml"

    - name: Register test files
      shell: "ls {{ goss_test_directory }}/test_*.yml"
      register: test_files

    - name: Execute Goss tests
      command: "{{ goss_dst }} -g {{ item }} validate --format {{ goss_format }}"
      register: test_results
      with_items: "{{ test_files.stdout_lines }}"

    - name: Display details about the Goss results
      debug:
        msg: "{{ item.stdout_lines }}"
      with_items: "{{ test_results.results }}"

    - name: Fail when tests fail
      fail:
        msg: "Goss failed to validate"
      when: item.rc != 0
      with_items: "{{ test_results.results }}"
